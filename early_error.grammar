
# ecmaspeak-py/early_error.grammar:
# A grammar for Early Error rules.
#
# Copyright (C) 2018  J. Michael Dyck <jmdyck@ibiblio.org>

{START} :
    {LI}{_eos_}

{LI} :
    <li>{EE_RULE}</li>
    <li>{nlai}{EE_RULE}{nlai}</li>

{EE_RULE} :
    <p>It is a Syntax Error if {CONDITION_1} and the following algorithm evaluates to {BOOL_LITERAL}:</p>{nlai}{h_emu_alg}
    <p>It is a Syntax Error if {LOCAL_REF} is{nlai}<br>{nlai}{h_emu_grammar}{nlai}<br>{nlai}and {LOCAL_REF} ultimately derives a phrase that, if used in place of {LOCAL_REF}, would produce a Syntax Error according to these rules. This rule is recursively applied.</p>
    All Early Error rules for {nonterminal} and its derived productions also apply to {EX}.
    All Early Error rules for {nonterminal} and its derived productions apply to {EX}.
    All early error rules for {nonterminal} and its derived productions also apply to {EX}.
    Always throw a Syntax Error if code matches this production.
    For each {nonterminal} {var} in {NAMED_OPERATION_INVOCATION}: It is a Syntax Error if {CONDITION}.
    If {CONDITION}, it is a Syntax Error if {CONDITION}.
    If {CONDITION}, the Early Error rules for {h_emu_grammar} are applied.
    It is a Syntax Error if {CONDITION_1}<ins>, unless {CONDITION_1} and {CONDITION_1}</ins>.
    It is a Syntax Error if {CONDITION}.
    It is a Syntax Error if {CONDITION}. Additional early error rules for {G_SYM} in direct eval are defined in {h_emu_xref}.
    It is a Syntax Error if {CONDITION}. Additional early error rules for {G_SYM} within direct eval are defined in {h_emu_xref}.
    It is an early Reference Error if {CONDITION}.
    It is an early Syntax Error if {CONDITION}.

{CONDITION} :
    {CONDITION_1}
    {CONDITION_1} and {CONDITION_1}
    {CONDITION_1} and {CONDITION_1} and {CONDITION_1}
    {CONDITION_1} or if {CONDITION_1}
    {CONDITION_1} or {CONDITION_1}
    {CONDITION_1} or {CONDITION_1} <ins>and {CONDITION_1}</ins>
    {CONDITION_1} unless {CONDITION_1}
    {CONDITION_1}, unless {CONDITION_1}

    {CONDITION_1} or {CONDITION_1} and {CONDITION_1}


    # obsoleted by the merge of PR #1658:
    # {CONDITION_1} and if {CONDITION_1}

{CONDITION_1} :
    any code matches this production
    any element of {NAMED_OPERATION_INVOCATION} also occurs in {NAMED_OPERATION_INVOCATION}
    any element of {NAMED_OPERATION_INVOCATION} does not also occur in either {NAMED_OPERATION_INVOCATION}, or {NAMED_OPERATION_INVOCATION}
    any source text matches this rule
    at least two of those entries were obtained from productions of the form {h_emu_grammar}
    the <sub>[Tagged]</sub> parameter was not set
    the List of Unicode code points that is {NAMED_OPERATION_INVOCATION} is not identical to a List of Unicode code points that is a Unicode general category or general category alias listed in the &ldquo;Property value and aliases&rdquo; column of {h_emu_xref}, nor a binary property or binary property alias listed in the &ldquo;Property name and aliases&rdquo; column of {h_emu_xref}
    the List of Unicode code points that is {NAMED_OPERATION_INVOCATION} is not identical to a List of Unicode code points that is a Unicode property name or property alias listed in the &ldquo;Property name and aliases&rdquo; column of {h_emu_xref}
    the List of Unicode code points that is {NAMED_OPERATION_INVOCATION} is not identical to a List of Unicode code points that is a value or value alias for the Unicode property or property alias given by {NAMED_OPERATION_INVOCATION} listed in the &ldquo;Property value and aliases&rdquo; column of the corresponding tables {h_emu_xref} or {h_emu_xref}
    the code matched by {PROD_REF} is contained in strict mode code
    the code that matches {PROD_REF} is contained in strict mode code
    the duplicate entries are only bound by {cap_word}
    the enclosing {nonterminal} does not contain a {nonterminal} with an enclosed {nonterminal} whose {cap_word} equals the {cap_word} of the {nonterminal} of {PROD_REF}
    the goal symbol of the syntactic grammar is {nonterminal}
    the name is used once for a getter and once for a setter and in no other entries, and the getter and setter are either both static or both non-static
    the number of elements in the result of {NAMED_OPERATION_INVOCATION} is greater than 2<sup>32</sup> - 1
    the source code containing {G_SYM} is eval code that is being processed by a direct eval
    the source code matching {PROD_REF} is not strict mode code
    the source code matching {PROD_REF} is strict mode code
    the syntactic goal symbol is not {nonterminal}
    this production has an? <sub>[{cap_word}]</sub> parameter
    {LOCAL_REF} Contains {G_SYM}
    {LOCAL_REF} Contains {G_SYM} is {BOOL_LITERAL}
    {LOCAL_REF} contains a Unicode escape sequence
    {LOCAL_REF} contains multiple {nonterminal}s whose enclosed {nonterminal}s have the same {cap_word}
    {LOCAL_REF} is an {nonterminal} or an {nonterminal}
    {LOCAL_REF} is contained in strict mode code
    {LOCAL_REF} is not covering an? {nonterminal}
    {LOCAL_REF} is not nested, directly or indirectly (but not crossing function boundaries), within an {nonterminal}
    {LOCAL_REF} is not nested, directly or indirectly (but not crossing function boundaries), within an {nonterminal} or a {nonterminal}
    {LOCAL_REF} is {h_emu_grammar}
    {LOCAL_REF} is {h_emu_grammar}, {h_emu_grammar}, {h_emu_grammar}, {h_emu_grammar}, or {h_emu_grammar}
    {NAMED_OPERATION_INVOCATION} contains any duplicate elements
    {NAMED_OPERATION_INVOCATION} contains any duplicate entries
    {NAMED_OPERATION_INVOCATION} contains any duplicate entries for {starred_str}
    {NAMED_OPERATION_INVOCATION} contains more than one occurrence of {starred_str}
    {NAMED_OPERATION_INVOCATION} contains {starred_str}
    {NAMED_OPERATION_INVOCATION} is a {nonterminal}
    {NAMED_OPERATION_INVOCATION} is larger than {NAMED_OPERATION_INVOCATION}
    {NAMED_OPERATION_INVOCATION} is larger than {var} ({h_emu_xref})
    {NAMED_OPERATION_INVOCATION} is none of {starred_str}, or {starred_str}, or ! {NAMED_OPERATION_INVOCATION} for some Unicode code point {var} matched by the {nonterminal} lexical grammar production
    {NAMED_OPERATION_INVOCATION} is none of {starred_str}, {starred_str}, ! {NAMED_OPERATION_INVOCATION}, ! {NAMED_OPERATION_INVOCATION}, or ! {NAMED_OPERATION_INVOCATION} for some Unicode code point {var} that would be matched by the {nonterminal} lexical grammar production
    {NAMED_OPERATION_INVOCATION} is not empty
    {NAMED_OPERATION_INVOCATION} is not matched by the {nonterminal} lexical grammar production
    {NAMED_OPERATION_INVOCATION} is not the code point value of {starred_str}, {starred_str}, or some code point matched by the {nonterminal} lexical grammar production
    {NAMED_OPERATION_INVOCATION} is not the code point value of {starred_str}, {starred_str}, {named_char}, {named_char}, or some code point matched by the {nonterminal} lexical grammar production
    {NAMED_OPERATION_INVOCATION} is not {LITERAL}
    {NAMED_OPERATION_INVOCATION} is one of: {starred_str}, {starred_str}, {starred_str}, {starred_str}, {starred_str}, {starred_str}, {starred_str}, or {starred_str}
    {NAMED_OPERATION_INVOCATION} is the same String value as the StringValue of any |ReservedWord| except for `yield` or `await`
    {NAMED_OPERATION_INVOCATION} is {LITERAL}
    {NAMED_OPERATION_INVOCATION} is {starred_str} or {starred_str}
    {NAMED_OPERATION_INVOCATION} is: {starred_str}, {starred_str}, {starred_str}, {starred_str}, {starred_str}, {starred_str}, {starred_str}, {starred_str}, or {starred_str}
    {PROD_REF} is not present
    {PROD_REF} is present

    {var} &ge; 2<sup>32</sup> - 1

    # obsoleted by the merge of PR #1464:
    # {NAMED_OPERATION_INVOCATION} cannot be recognized using the goal symbol {nonterminal} of the ECMAScript RegExp grammar specified in {h_emu_xref}
    # {NAMED_OPERATION_INVOCATION} contains any code points other than `g`, `i`, `m`, `s`, `u`, or `y`, or if it contains the same code point more than once

    # obsoleted by the merge of PR #1658:
    # {LOCAL_REF} derives a phrase that would produce a Syntax Error according to these rules if that phrase were substituted for {PROD_REF}. This rule is recursively applied
    # {LOCAL_REF} is either an {nonterminal} or an {nonterminal}
    # {LOCAL_REF} is neither an {nonterminal} nor an {nonterminal}

    # obsoleted by the merge of PR #1724:
    # {NAMED_OPERATION_INVOCATION} contains any code points other than `"g"`, `"i"`, `"m"`, `"s"`, `"u"`, or `"y"`, or if it contains the same code point more than once

    ## directed-operations:
    ## {NAMED_OPERATION_INVOCATION} is `"eval"` or `"arguments"`

    # PR 1651 one-grammar
    a {nonterminal} contains the source code matching {PROD_REF}

{NAMED_OPERATION_INVOCATION} :
    the result of performing {cap_word} on {EX}
    the {cap_word} of {LOCAL_REF}
    {cap_word} of {LOCAL_REF}
    {cap_word} of {LOCAL_REF} {WITH_ARGS}
    {cap_word}({PROD_REF})
    {cap_word}({named_char})
    {cap_word}({var})

    ## directed-operations:
    ## {var}.\w+()
    ## {nonterminal}.\w+()
    ## {nonterminal}.\w+({G_SYM})


{LOCAL_REF} :
    {PROD_REF}
    {var}

{PROD_REF} :
    the derived {nonterminal}
    the {ORDINAL} {nonterminal}
    the {nonterminal}
    the {nonterminal} containing this {nonterminal}
    this phrase
    this production
    this production's {nonterminal}
    this {nonterminal}
    {nonterminal}

{ORDINAL} :
    first
    second

{WITH_ARGS} :
    with argument {EX}
    with arguments {EX} and {EX}

{EX} :
    the {nonterminal} that is covered by {LOCAL_REF}
    &laquo; &raquo;
    the two code points matched by {nonterminal} and {nonterminal} respectively
    {LITERAL}

{LITERAL} :
    {BOOL_LITERAL}
    {starred_str}
    {tilded_word}

{G_SYM} :
    {TERMINAL}
    {nonterminal}

{TERMINAL} :
    {backticked_word}

{BOOL_LITERAL} :
    *false*
    *true*

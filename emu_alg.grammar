
# ecmaspeak-py/emu_alg.grammar:
# A grammar for the content of <emu-alg> elements.
#
# Copyright (C) 2018  J. Michael Dyck <jmdyck@ibiblio.org>

{START} :
    {EMU_ALG_BODY}{_eos_}

{EMU_ALG_BODY} :
    {IND_COMMANDS}{nlai}

{IND_COMMANDS} :
    {_indent_}{COMMANDS}{_outdent_}

{COMMANDS} :
    {COMMANDS}{_NL_N} {COMMAND}
    {_NL_N} {COMMAND}

{_NL_N} :
    {nlai}{dec_int_lit}.
    {nlai}{dec_int_lit}. {step_label}

{COMMAND} :
    ? OperationName().
    ? {var}.OperationName().
    Add {EX} as the last element of {var}.
    Add {var} as an element of the list {var}.
    Add {var} to the end of the list of waiters in {var}.
    Add {var} to the end of {var}.
    Add {var} to {var}.
    Append in List order the elements of {var} to the end of the List {var}.
    Append the code unit elements of {var} to the end of {var}.
    Append the pair (a two element List) consisting of {var} and {var} to the end of {var}.
    Append to {var} each element of {var} that is not already an element of {var}.
    Append to {var} the elements of {var}.
    Append {EX} and {EX} to {var}.
    Append {EX} as an element of {var}.
    Append {EX} as the last element of the List that is {DOTTING}.
    Append {EX} as the last element of {var}.
    Append {EX} to the end of the List {var}.
    Append {EX} to the end of {EX}.
    Append {EX} to {EX}.
    Assert: If {CONDITION}, then {CONDITION}.
    Assert: If {CONDITION}, {CONDITION}.
    Assert: {CONDITION_1} if and only if {CONDITION_1}.
    Assert: {CONDITION_1} if {CONDITION_1}; otherwise, {CONDITION_1}.
    Assert: {CONDITION}.
    Attempt to parse {var} using {var} as the goal symbol, and analyse the parse result for any early error conditions. Parsing and early error detection may be interleaved in an implementation-defined manner.
    Call {PREFIX_PAREN}.
    Choose any such {var}.
    Create a mutable binding in {var} for {var} and record that it is uninitialized. If {var} is *true*, record that the newly created binding may be deleted by a subsequent DeleteBinding call.
    Create an immutable binding in {var} for {var} and record that it is uninitialized. If {var} is *true*, record that the newly created binding is a strict binding.
    Create an immutable indirect binding in {var} for {var} that references {var} and {var} as its target binding and record that the binding is initialized.
    Create any host-defined global object properties on {var}.
    Create own properties of {var} corresponding to the definitions in {h_emu_xref}.
    Discard all resources associated with the current execution context.
    Find a finite time value {var} such that {CONDITION}; but if this is not possible (because some argument is out of range), return {LITERAL}.
    For each {EACH_THING}, do{IND_COMMANDS}
    For each {EACH_THING}, {SMALL_COMMAND}.
    IfAbruptRejectPromise({var}, {var}).
    IfAbruptCloseIterator({var}, {var}).
    Insert {var} as the first element of {var}.
    Leave the critical section for {var}.
    Let {var} and {var} be integers such that {CONDITION} and for which {NUM_EXPR} is as close to zero as possible. If there are two such sets of {var} and {var}, pick the {var} and {var} for which {PRODUCT} is larger.
    Let {var} and {var} be the indirection values provided when this binding for {var} was created.
    Let {var} and {var} be {LITERAL}.
    Let {var} be an integer for which {NUM_EXPR} is as close to zero as possible. If there are two such {var}, pick the larger {var}.
    Let {var} be the first element of {var} and remove that element from {var}.
    Let {var} be the smallest non-negative integer such that {CONDITION}. (There must be such a {var}, for neither String is a prefix of the other.)
    Let {var} be {EXPR}.
    Let {var} be {EXPR}. (However, if {var} is 10 and {var} contains more than 20 significant digits, every significant digit after the 20th may be replaced by a 0 digit, at the option of the implementation; and if {var} is not 2, 4, 8, 10, 16, or 32, then {var} may be an implementation-approximated integer representing the integer value denoted by {var} in radix-{var} notation.)
    Let {var} be {EXPR}. (It may be evaluated repeatedly.)
    Let {var} be {EXPR}. (This is the same value as {h_emu_xref}'s {var}.)
    Let {var} be {EXPR}. This alias will be used throughout the algorithms in {h_emu_xref}.
    Let {var} be {MULTILINE_EXPR}
    Let {var}, {var}, and {var} be integers such that {CONDITION}. If there are multiple possibilities for {var}, choose the value of {var} for which {EX} is closest in value to {EX}. If there are two such possible values of {var}, choose the one that is even.
    Let {var}, {var}, and {var} be integers such that {CONDITION}. Note that the decimal representation of {var} has {SUM} digits, {var} is not divisible by 10, and the least significant digit of {var} is not necessarily uniquely determined by these criteria.
    No action is required.
    Notify the agent {var}.
    Once a generator enters the {tilded_word} state it never leaves it and its associated execution context is never resumed. Any execution state associated with {var} can be discarded at this point.
    Optionally, {SMALL_COMMAND}.
    Parse {PP_NAMED_OPERATION_INVOCATION} as a JSON text as specified in ECMA-404. Throw a {ERROR_TYPE} exception if it is not a valid JSON text as defined in that specification.
    Perform an implementation-defined debugging action.
    Perform any necessary implementation-defined initialization of {var}.
    Perform the following substeps in an implementation-defined order, possibly interleaving parsing and error detection:{IND_COMMANDS}
    Perform {PP_NAMED_OPERATION_INVOCATION} and suspend {var} for up to {var} milliseconds, performing the combined operation in such a way that a notification that arrives after the critical section is exited but before the suspension takes effect is not lost. {var} can notify either because the timeout expired or because it was notified explicitly by another agent calling NotifyWaiter({var}, {var}), and not for any other reasons at all.
    Perform {PP_NAMED_OPERATION_INVOCATION}.
    Perform {PP_NAMED_OPERATION_INVOCATION}. {note}
    Prepend {var} to {var}.
    Push {var} onto the execution context stack; {var} is now the running execution context.
    Remove from {var} all characters corresponding to a code point on the right-hand side of the {nonterminal} production.
    Remove the binding for {var} from {var}.
    Remove the first element from {var}.
    Remove the first two code units from {var}.
    Remove the last element of {SETTABLE}.
    Remove the own property with name {var} from {var}.
    Remove {var} from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.
    Remove {var} from the execution context stack and restore {var} as the running execution context.
    Remove {var} from the execution context stack.
    Remove {var} from the front of {var}.
    Remove {var} from the list of waiters in {var}.
    Remove {var} from {DOTTING}.
    Remove {var} from {var}.
    Repeat, until {CONDITION},{IND_COMMANDS}
    Repeat, while {CONDITION},{IND_COMMANDS}
    Repeat,{IND_COMMANDS}
    Replace the element of {SETTABLE} whose value is {var} with an element whose value is {LITERAL}.
    Replace {var} in {var} with {var}.
    Resume the context that is now on the top of the execution context stack as the running execution context.
    Resume the suspended evaluation of {var} using {EX} as the result of the operation that suspended it.
    Resume the suspended evaluation of {var} using {EX} as the result of the operation that suspended it. Let {var} be the completion record returned by the resumed computation.
    Resume the suspended evaluation of {var} using {EX} as the result of the operation that suspended it. Let {var} be the value returned by the resumed computation.
    Resume the suspended evaluation of {var}. Let {var} be the value returned by the resumed computation.
    Return {EXPR}.
    Return {MULTILINE_EXPR}
    Return {var} as the Completion Record of this abstract operation.
    Return.
    ReturnIfAbrupt({EX}).
    Search {PROD_REF} for an instance of a {nonterminal} containing a {nonterminal} which has a {cap_word} equal to {NAMED_OPERATION_INVOCATION}.
    Set all of the bytes of {var} to 0.
    Set fields of {var} with the values listed in {h_emu_xref}. {the_field_names_are_the_names_listed_etc}
    Set {DOTTING} as described in {h_emu_xref}.
    Set {DOTTING} as specified in {h_emu_xref}.
    Set {DOTTING} to the definition specified in {h_emu_xref}.
    Set {SETTABLE} such that when evaluation is resumed for that execution context the following steps will be performed:{IND_COMMANDS}
    Set {SETTABLE} such that when evaluation is resumed with a Completion {var} the following steps will be performed:{IND_COMMANDS}
    Set {SETTABLE} such that when evaluation is resumed with a Completion {var}, the following steps of the algorithm that invoked Await will be performed, with {var} available.
    Set {SETTABLE} to {EXPR}.
    Set {SETTABLE} to {MULTILINE_EXPR}
    Set {var}'s essential internal methods to the default ordinary object definitions specified in {h_emu_xref}.
    Set {var}'s essential internal methods to the definitions specified in {h_emu_xref}.
    Set {var}'s essential internal methods, except for {DSBN} and {DSBN}, to the definitions specified in {h_emu_xref}.
    Sort {var} using an implementation-defined sequence of calls to SortCompare. If any such call returns an abrupt completion, stop before performing any further calls to SortCompare or steps in this algorithm and return that completion.
    Store the individual bytes of {var} into {var}, starting at {var}[{var}].
    Suspend the currently running execution context.
    Suspend {var} and remove it from the execution context stack.
    Suspend {var}.
    The code points `/` or any {nonterminal} occurring in the pattern shall be escaped in {var} as necessary to ensure that the string-concatenation of {EX}, {EX}, {EX}, and {EX} can be parsed (in an appropriate lexical context) as a {nonterminal} that behaves identically to the constructed regular expression. For example, if {var} is {STR_LITERAL}, then {var} could be {STR_LITERAL} or {STR_LITERAL}, among other possibilities, but not {STR_LITERAL}, because `///` followed by {var} would be parsed as a {nonterminal} rather than a {nonterminal}. If {var} is the empty String, this specification can be met by letting {var} be {STR_LITERAL}.
    Throw a {ERROR_TYPE} exception.
    Wait until no agent is in the critical section for {var}, then enter the critical section for {var} (without allowing any other agent to enter).
    When the {nonterminal} {var} is evaluated, perform the following steps in place of the {nonterminal} Evaluation algorithm provided in {h_emu_xref}:{IND_COMMANDS}
    While {CONDITION}, an implementation may perform the following steps:{IND_COMMANDS}
    {IF_CLOSED}
    {IF_OTHER}
    {h_emu_not_ref_Record} that the binding for {var} in {var} has been initialized.
    {note}
    {var} is an index into the {var} character list, derived from {var}, matched by {var}. Let {var} be the smallest index into {var} that corresponds to the character at element {var} of {var}. If {var} is greater than or equal to the number of elements in {var}, then {var} is the number of code units in {var}.

# ----------------------------------------------

{IF_CLOSED} :
    If {CONDITION}, {SMALL_COMMAND}. Otherwise {SMALL_COMMAND}.
    If {CONDITION}, {SMALL_COMMAND}. Otherwise, {SMALL_COMMAND}.
    If {CONDITION}, {SMALL_COMMAND}. Otherwise, {SMALL_COMMAND}. {var} will be used throughout the algorithms in {h_emu_xref}. Each element of {var} is considered to be a character.
    If {CONDITION}, {SMALL_COMMAND}; else if {CONDITION}, {SMALL_COMMAND}; else {SMALL_COMMAND}.
    If {CONDITION}, {SMALL_COMMAND}; else {SMALL_COMMAND}.
    If {CONDITION}, {SMALL_COMMAND}; otherwise {SMALL_COMMAND}.
    If {CONDITION}, {SMALL_COMMAND}; otherwise, {SMALL_COMMAND}.

{IF_OTHER} :
    {IF_OPEN}{IF_TAIL}

{IF_OPEN} :
    If {CONDITION}, then{IND_COMMANDS}
    If {CONDITION}, {MULTILINE_SMALL_COMMAND}
    If {CONDITION}, {SMALL_COMMAND}.

{IF_TAIL} :
    {EPSILON}
    {_NL_N} {ELSEIF_PART}{IF_TAIL}
    {_NL_N} {ELSE_PART}

{ELSEIF_PART} :
    Else if {CONDITION}, then{IND_COMMANDS}
    Else if {CONDITION}, {SMALL_COMMAND}.
    Otherwise, if {CONDITION}, {MULTILINE_SMALL_COMMAND}

{ELSE_PART} :
    Else, {CONDITION_1}. {COMMAND}
    Else, {SMALL_COMMAND}.
    Else,{IND_COMMANDS}
    Otherwise, {SMALL_COMMAND}.

# ----------------------------------------------

{MULTILINE_SMALL_COMMAND} :
    return {MULTILINE_EXPR}

{SMALL_COMMAND} :
    ReturnIfAbrupt({var})
    add {var} to {var}
    append each of its elements to {var}
    append {EX} to {var}
    append {code_unit_lit} as the last code unit of {var}
    change its bound value to {var}
    convert the property named {var} of object {var} from an? {PROPERTY_KIND} property to an? {PROPERTY_KIND} property. Preserve the existing values of the converted property's {DSBN} and {DSBN} attributes and set the rest of the property's attributes to their {h_emu_xref}
    create an own {PROPERTY_KIND} property named {var} of object {var} whose {DSBN}, {DSBN}, {DSBN}, and {DSBN} attribute values are described by {var}. If the value of an attribute field of {var} is absent, the attribute of the newly created property is set to its {h_emu_xref}
    let {var} be {EXPR}
    let {var} be {EXPR}, indicating that an ordinary object should be created as the global object
    let {var} be {EXPR}, indicating that {var}'s global `this` binding should be the global object
    let {var}, {var}, and {var} be integers such that {CONDITION}. Note that {var} is the number of digits in the decimal representation of {var}, that {var} is not divisible by {NUM_LITERAL}, and that the least significant digit of {var} is not necessarily uniquely determined by these criteria
    perform any host-defined steps for reporting the error
    perform {PP_NAMED_OPERATION_INVOCATION}
    remove that element from the {var}
    remove the first code unit from {var}
    return
    return {EXPR}
    reverse the order of the elements of {var}
    set the corresponding attribute of the property named {var} of object {var} to the value of the field
    set {SETTABLE} to {EXPR}
    store the individual bytes of {var} into {var}, starting at {var}[{var}]
    suspend {var}
    throw a {ERROR_TYPE} exception
    throw a {ERROR_TYPE} exception because the structure is cyclical

# ------------------------------------------------------

{EACH_THING} :
    child node {var} of this Parse Node
    element {var} of {EX}
    element {var} of {var}, in reverse List order
    field of {var} that is present
    index {var} of {var}
    integer {var} starting with {EX} such that {CONDITION}, in ascending order
    non-negative integer {var} starting with {var} such that {CONDITION}, in descending order
    own property key {var} of {var} such that {CONDITION}, in ascending chronological order of property creation
    own property key {var} of {var} such that {CONDITION}, in ascending numeric index order
    own property key {var} of {var} that is an array index, whose numeric value is greater than or equal to {var}, in descending numeric index order
    property of the Global Object specified in clause {h_emu_xref}
    {ITEM_NATURE} {var} of {EX}
    {ITEM_NATURE} {var} such that {CONDITION}
    {ITEM_NATURE} {var} such that {CONDITION}, in ascending order
    {nonterminal} {var} that is directly contained in the {nonterminal} of a {nonterminal}, {nonterminal}, or {nonterminal}
    {nonterminal} {var} that is directly contained in the {nonterminal} of a {nonterminal}, {nonterminal}, or {nonterminal} Contained within {var}

{ITEM_NATURE} :
    Agent Events Record
    Cyclic Module Record
    ExportEntry Record
    FinalizationRegistry
    ImportEntry Record
    Parse Node
    Private Name
    PrivateElement
    ReadSharedMemory or ReadModifyWriteSharedMemory event
    Record { {DSBN}, {DSBN} }
    Record { {DSBN}, {DSBN}, {DSBN} }
    String
    WeakMap
    WeakRef
    WeakSet
    code point
    event
    integer
    {nonterminal}

# ------------------------------------------------------

{I_BULLETS} :
    {_indent_}{BULLETS}{_outdent_}

{BULLETS} :
    {BULLETS}{BULLET_LINE}
    {BULLET_LINE}

{BULLET_LINE} :

    {B} the String representation of {EX}, formatted as a four-digit lowercase hexadecimal number, padded to the left with zeroes if necessary
    {B} the String representation of {EX}, formatted as a four-digit uppercase hexadecimal number, padded to the left with zeroes if necessary
    {B} the String representation of {EX}, formatted as a two-digit uppercase hexadecimal number, padded to the left with a zero if necessary
    {B} the code unit of the single digit of {var}
    {B} the code units of the decimal representation of the integer abs({var} - 1) (with no leading zeroes)
    {B} the code units of the most significant digit of the decimal representation of {var}
    {B} the code units of the most significant {var} digits of the decimal representation of {var}
    {B} the code units of the remaining {NUM_EXPR} digits of the decimal representation of {var}
    {B} the code units of the {var} digits of the decimal representation of {var}
    {B} the code units of the {var} digits of the decimal representation of {var} (in order, with no leading zeroes)
    {B} {EX} occurrences of {code_unit_lit}
    {B} {LITERAL}
    {B} {code_unit_lit} or {code_unit_lit} according to whether {var} - 1 is positive or negative
    {B} {var}

{B} :
    {nlai}*

# ----------------------------------------------------------------------------------------

{CONDITION} :
    ({NUM_COMPARISON} or {NUM_COMPARISON}) and ({NUM_COMPARISON} or {NUM_COMPARISON})
    {CONDITION_1}
    {CONDITION_1} and if {CONDITION_1}
    {CONDITION_1} and {CONDITION_1}
    {CONDITION_1} and {CONDITION_1} and {CONDITION_1}
    {CONDITION_1} and {CONDITION_1} and {CONDITION_1} and {CONDITION_1}
    {CONDITION_1} and {CONDITION_1} or {CONDITION_1} and {CONDITION_1}
    {CONDITION_1} and {CONDITION_1}, or if {CONDITION_1} and {CONDITION_1}
    {CONDITION_1} and {CONDITION_1}, or {CONDITION_1} and {CONDITION_1}
    {CONDITION_1} or if {CONDITION_1}
    {CONDITION_1} or {CONDITION_1}
    {CONDITION_1} or {CONDITION_1} or {CONDITION_1}
    {CONDITION_1} or {CONDITION_1} or {CONDITION_1} or {CONDITION_1}
    {CONDITION_1}, and {CONDITION_1}
    {CONDITION_1}, or if {CONDITION_1}
    {CONDITION_1}, or if {CONDITION_1} and {CONDITION_1}
    {CONDITION_1}, or {CONDITION_1}
    {CONDITION_1}, {CONDITION_1}, and {CONDITION_1}
    {CONDITION_1}, {CONDITION_1}, or {CONDITION_1}
    {CONDITION_1}, {CONDITION_1}, {CONDITION_1}, and {CONDITION_1}
    {CONDITION_1}, {CONDITION_1}, {CONDITION_1}, or {CONDITION_1}
    {CONDITION_1}, {CONDITION_1}, {CONDITION_1}, {CONDITION_1}, or {CONDITION_1}

{CONDITION_1} :
    A `default` export was not explicitly defined by this module
    A unique such {nonterminal} is found
    All elements of {var} have their {dsb_word} field set to {LITERAL}, {dsb_word} field set to {LITERAL}, and {dsb_word} field set to {LITERAL}
    All named exports from {var} are resolvable
    Evaluate has already been invoked on {var} and successfully completed
    Exactly one element of {var} is a Private Name whose {dsb_word} is {var}
    GlobalSymbolRegistry does not currently contain an entry for {var}
    The calling agent is in the critical section for {var}
    The calling agent is not in the critical section for any WaiterList
    The current execution context will not subsequently be used for the evaluation of any ECMAScript code or built-in functions. The invocation of Call subsequent to the invocation of this abstract operation will create and push a new execution context before performing any such evaluation
    The execution context stack has at least two elements
    The execution context stack is not empty
    The following loop will terminate
    The length of {var} is {var}
    The mathematical value of {var}'s {starred_str} property is {EX}
    The next step never returns an abrupt completion because {CONDITION_1}
    The value of {SETTABLE} is {LITERAL}
    There are sufficient bytes in {var} starting at {var} to represent a value of {var}
    There is more than one `*` import that includes the requested name
    This call to Evaluate is not happening at the same time as another call to Evaluate within the surrounding agent
    This is a circular import request
    This is an attempt to change the value of an immutable binding
    This is only possible for getter/setter pairs
    We've reached the starting point of an `export *` circularity
    When we reach this step, {var} has already been removed from the execution context stack and {var} is the currently running execution context
    When we return here, {var} has already been removed from the execution context stack and {var} is the currently running execution context
    When {SETTABLE} is instantiated it will have a direct binding for {var}
    an implementation-defined debugging facility is available and enabled
    both {EX} and {EX} are absent
    both {EX} and {EX} are {LITERAL}
    either {PAIR} or {PAIR} is in {EX}
    every field in {var} is absent
    it must be in the object Environment Record
    its value is {LITERAL}
    neither {var} nor any prefix of {var} satisfies the syntax of a {nonterminal} (see {h_emu_xref})
    no such execution context exists
    only one argument was passed
    replacing the {nonterminal} {var} with a {nonterminal} that has {var} as a {nonterminal} would not produce any Early Errors for {var}
    the Directive Prologue of {PROD_REF} contains a Use Strict Directive
    the async function either threw an exception or performed an implicit or explicit return; all awaiting is done
    the async generator either threw an exception or performed either an implicit or explicit return
    the binding exists
    the binding for {var} in {var} cannot be deleted
    the binding for {var} in {var} has not yet been initialized
    the binding for {var} in {var} is a mutable binding
    the binding for {var} in {var} is a strict binding
    the binding for {var} in {var} is an uninitialized binding
    the binding for {var} is an indirect binding
    the caller will not be overriding all of {var}'s {DSBN}, {DSBN}, and {DSBN} essential internal methods
    the caller will not be overriding both {var}'s {DSBN} and {DSBN} essential internal methods
    the character {EX} is one of {nonterminal}
    the code units at index ({SUM}) and ({SUM}) within {var} do not represent hexadecimal digits
    the decimal representation of {var} has 20 or fewer significant digits
    the execution context stack is empty
    the file CaseFolding.txt of the Unicode Character Database provides a simple or common case folding mapping for {var}
    the first two code units of {var} are either {STR_LITERAL} or {STR_LITERAL}
    the generator either threw an exception or performed either an implicit or explicit return
    the host requires that the `this` binding in {var}'s global scope return an object other than the global object
    the host requires use of an exotic object to serve as {var}'s global object
    the pairs {PAIR} and {PAIR} are in {EX}
    the pairs {PAIR} and {PAIR} are not in {EX}
    the parse succeeded and no early errors were found
    the source text matched by the syntactic production that is being evaluated is contained in strict mode code
    the source text matched by {PROD_REF} is strict mode code
    the source text matched by {var} is non-strict code
    the source text matched by {var} is strict mode code
    the {var}<sup>th</sup> capture of {var} was defined with a {nonterminal}
    there does not exist an element {var} of {var} such that {CONDITION_1}
    there exists a member {var} of {var} such that {CONDITION_1}
    there exists an integer {var} between 0 (inclusive) and {var} (exclusive) such that {CONDITION_1}
    there is a WriteSharedMemory or ReadModifyWriteSharedMemory event {var} that has {var} in its range such that {CONDITION_1}
    there is an event {var} such that {CONDITION}
    we return here
    {DOTTING} and {DOTTING} are not the same Module Record
    {DOTTING} contains a Record {var} such that {CONDITION_1}
    {DOTTING} exists and has been initialized
    {DOTTING} is not the ordinary object internal method defined in {h_emu_xref}
    {DOTTING} is {LITERAL} and was never previously set to {LITERAL}
    {EX} and {EX} are both {LITERAL}
    {EX} and {EX} are both {LITERAL} or both {LITERAL}
    {EX} and {EX} are distinct values
    {EX} and {EX} are the same Shared Data Block values
    {EX} and {EX} are valid byte offsets within the memory of {var}
    {EX} contains a Private Name whose {dsb_word} is {var}
    {EX} contains a PrivateElement whose {dsb_word} is {var}
    {EX} does not contain {EX}
    {EX} is -1
    {EX} is a Private Name
    {EX} is a String
    {EX} is a sequence of Unicode code points
    {EX} is absent
    {EX} is absent or is {LITERAL}
    {EX} is an Environment Record
    {EX} is an element of {var}
    {EX} is different from {EX}
    {EX} is either {LITERAL} or {LITERAL}
    {EX} is either {LITERAL}, {LITERAL}, or {LITERAL}
    {EX} is either {LITERAL}, {LITERAL}, {LITERAL}, or {LITERAL}
    {EX} is in {EX}
    {EX} is listed in the &ldquo;Code Point&rdquo; column of {h_emu_xref}
    {EX} is neither {LITERAL} nor the active function
    {EX} is neither {LITERAL} nor {LITERAL}
    {EX} is not -1
    {EX} is not an element of {var}
    {EX} is not present
    {EX} is not the same value as {var}
    {EX} is not {LITERAL}
    {EX} is not {LITERAL} or {LITERAL}
    {EX} is present
    {EX} is present and has value {LITERAL}
    {EX} is the same Parse Node as {EX}
    {EX} is the same as {EX}
    {EX} is {LITERAL}
    {EX} is {LITERAL} or {LITERAL}
    {EX} is {LITERAL}, {LITERAL}, or {LITERAL}
    {EX} is {LITERAL}, {LITERAL}, {LITERAL}, or {LITERAL}
    {EX} is {PREFIX_PAREN}
    {EX} is {var}
    {LOCAL_REF} Contains {nonterminal}
    {LOCAL_REF} is an? {nonterminal} or an? {nonterminal}
    {LOCAL_REF} is an? {nonterminal}, an? {nonterminal}, an? {nonterminal}, or an? {nonterminal}
    {LOCAL_REF} is an? {nonterminal}, an? {nonterminal}, or an? {nonterminal}
    {LOCAL_REF} is either an? {nonterminal} or an? {nonterminal}
    {LOCAL_REF} is either an? {nonterminal}, an? {nonterminal}, an? {nonterminal}, or an? {nonterminal}
    {LOCAL_REF} is neither an? {nonterminal} nor an? {nonterminal}
    {LOCAL_REF} is neither an? {nonterminal} nor an? {nonterminal} nor an? {nonterminal}
    {LOCAL_REF} is {backticked_oth}
    {LOCAL_REF} is {h_emu_grammar} 
    {NUM_COMPARISON}
    {PP_NAMED_OPERATION_INVOCATION} contains any code points other than {backticked_word}, {backticked_word}, {backticked_word}, {backticked_word}, {backticked_word}, or {backticked_word}, or if it contains the same code point more than once
    {PP_NAMED_OPERATION_INVOCATION} contains {backticked_word}
    {PP_NAMED_OPERATION_INVOCATION} is identical to a List of Unicode code points that is the name of a Unicode general category or general category alias listed in the &ldquo;Property value and aliases&rdquo; column of {h_emu_xref}
    {PP_NAMED_OPERATION_INVOCATION} is not the same character value as {PP_NAMED_OPERATION_INVOCATION}
    {PROD_REF} is `export` {nonterminal}
    {PROD_REF} is contained in strict mode code
    {PROD_REF} is contained within a {nonterminal} that is being evaluated for JSON.parse (see step {h_emu_xref} of {h_emu_xref})
    {PROD_REF} is the token `false`
    {PROD_REF} is the token `true`
    {SETTABLE} &ne; {SETTABLE} for any integer value {var} in the range {LITERAL} through {var}, exclusive
    {SETTABLE} contains {EX}
    {SETTABLE} has an? {DSBN} field
    {TYPE_TEST}
    {var} also has a {DSBN} internal slot
    {var} and {DOTTING} are the same Module Record
    {var} and {var} are both WriteSharedMemory or ReadModifyWriteSharedMemory events
    {var} and {var} are both finite
    {var} and {var} are both the same Symbol value
    {var} and {var} are exactly the same sequence of code units (same length and same code units at corresponding indices)
    {var} and {var} are finite and non-zero
    {var} and {var} are in a race in {var}
    {var} and {var} are not the same Realm Record
    {var} and {var} are the same Module Record
    {var} and {var} are the same Number value
    {var} and {var} are the same Object value
    {var} and {var} do not have disjoint ranges
    {var} and {var} do not have the same number of elements
    {var} and {var} each contain exactly one character
    {var} and {var} have equal ranges
    {var} and {var} have overlapping ranges
    {var} and {var} have the same number of elements
    {var} binds a single name
    {var} can be interpreted as an expansion of {nonterminal}
    {var} contains a PrivateElement whose {dsb_word} is {DOTTING}
    {var} contains a code unit that is not a radix-{var} digit
    {var} contains a formal parameter mapping for {var}
    {var} contains a {nonterminal}
    {var} contains any code unit other than *"g"*, *"i"*, *"m"*, *"s"*, *"u"*, or *"y"* or if it contains the same code unit more than once
    {var} contains any duplicate entries
    {var} contains any {nonterminal}
    {var} contains no duplicate entries
    {var} does not already have a binding for {var}
    {var} does not consist of a single code unit
    {var} does not contain a rest parameter, any binding patterns, or any initializers. It may contain duplicate identifiers
    {var} does not contain a valid UTF-8 encoding of a Unicode code point
    {var} does not contain exactly one character
    {var} does not currently have a property {var}
    {var} does not have a Generator component
    {var} does not have a binding for {var}
    {var} does not have an own property with key {var}
    {var} does not have an? {DSBN} field
    {var} does not have an? {DSBN} internal slot
    {var} does not have an? {var} internal slot
    {var} does not have either a {DSBN} or an {DSBN} internal slot
    {var} does not include the element {LITERAL}
    {var} does not provide the direct binding for this export
    {var} has a Synchronize event
    {var} has a binding for the name that is the value of {var}
    {var} has a binding for {var}
    {var} has a numeric value less than {code_unit_lit}
    {var} has all of the internal slots of a For-In Iterator Instance ({h_emu_xref})
    {var} has an? {DSBN} internal method
    {var} has an? {DSBN} internal slot
    {var} has an? {DSBN} internal slot whose value is an Object
    {var} has an? {DSBN} or {DSBN} internal slot
    {var} has any duplicate entries
    {var} has any elements
    {var} has attribute values { {DSBN}: *true*, {DSBN}: *true* }
    {var} has been linked and declarations in its module environment have been instantiated
    {var} has no duplicate entries
    {var} has no elements
    {var} has the same numeric value as a {h_emu_xref} or {h_emu_xref}
    {var} has {DSBN} and {DSBN} internal slots
    {var} has {var} in its range
    {var} imports a specific binding for this export
    {var} is a ClassFieldDefinition Record
    {var} is a ClassStaticBlockDefinition Record
    {var} is a Completion Record
    {var} is a Continuation
    {var} is a Cyclic Module Record
    {var} is a Data Block
    {var} is a List of WriteSharedMemory or ReadModifyWriteSharedMemory events with length equal to {EX}
    {var} is a List of a single Number
    {var} is a List of code points
    {var} is a List of code units
    {var} is a List of errors
    {var} is a List of property keys
    {var} is a Parse Node
    {var} is a PrivateElement
    {var} is a PromiseCapability Record
    {var} is a Proxy exotic object
    {var} is a Proxy object
    {var} is a ReadModifyWriteSharedMemory event
    {var} is a ReadSharedMemory, WriteSharedMemory, or ReadModifyWriteSharedMemory event
    {var} is a Reference Record
    {var} is a ResolvedBinding Record
    {var} is a Shared Data Block
    {var} is a Source Text Module Record
    {var} is a State
    {var} is a UTF-16 code unit
    {var} is a Unicode property name or property alias listed in the &ldquo;Property name and aliases&rdquo; column of {h_emu_xref}
    {var} is a Unicode {h_emu_not_ref_property_name} or property alias listed in the &ldquo;{h_emu_not_ref_Property_name} and aliases&rdquo; column of {h_emu_xref} or {h_emu_xref}
    {var} is a WriteSharedMemory event
    {var} is a binary Unicode property or binary property alias listed in the &ldquo;Property name and aliases&rdquo; column of {h_emu_xref}
    {var} is a bound function exotic object
    {var} is a canonical, unaliased Unicode property name listed in the &ldquo;Canonical property name&rdquo; column of {h_emu_xref}
    {var} is a non-empty List of {ERROR_TYPE} objects
    {var} is a non-negative integer which is &le; {EXPR}
    {var} is a non-negative integral Number
    {var} is a normal completion
    {var} is a normal completion with a value of {LITERAL}. The possible sources of completion values are Await or, if the async function doesn't await anything, step {h_emu_xref} above
    {var} is a possibly empty List
    {var} is a property value or property value alias for Unicode property {var} listed in the &ldquo;Property value and aliases&rdquo; column of {h_emu_xref} or {h_emu_xref}
    {var} is a {h_emu_xref}
    {var} is also {LITERAL}
    {var} is an Abstract Closure with no parameters
    {var} is an Array exotic object
    {var} is an ECMAScript function object
    {var} is an IEEE 754-2019 binary32 NaN value
    {var} is an IEEE 754-2019 binary64 NaN value
    {var} is an Object that has an? {DSBN} internal slot
    {var} is an abrupt completion
    {var} is an array index
    {var} is an extensible object that does not have a {starred_str} own property
    {var} is an extensible ordinary object with no own properties
    {var} is an instance of a nonterminal
    {var} is an instance of the production {h_emu_grammar}
    {var} is an instance of {var}
    {var} is an integer
    {var} is an integral Number
    {var} is an odd integral Number
    {var} is an ordinary, extensible object with no non-configurable properties
    {var} is an? {ENVIRONMENT_RECORD_KIND} Environment Record
    {var} is an? {PROPERTY_KIND} property
    {var} is an? {nonterminal}
    {var} is an? {nonterminal} Parse Node
    {var} is as small as possible
    {var} is either a String, Number, Boolean, Null, or an Object that is defined by either an {nonterminal} or an {nonterminal}
    {var} is empty
    {var} is finite
    {var} is finite and is neither {NUM_LITERAL} nor {NUM_LITERAL}
    {var} is never an abrupt completion
    {var} is not a Cyclic Module Record
    {var} is not a Reference Record
    {var} is not a Shared Data Block
    {var} is not a {h_emu_xref}
    {var} is not a {h_emu_xref} or {h_emu_xref}
    {var} is not a {nonterminal}
    {var} is not already suspended
    {var} is not an Object
    {var} is not an abrupt completion
    {var} is not an abrupt completion because of validation preceding step {h_emu_xref}
    {var} is not an array index
    {var} is not an empty List
    {var} is not an integer index
    {var} is not an integral Number
    {var} is not an? {ENVIRONMENT_RECORD_KIND} Environment Record
    {var} is not contained within an? {nonterminal}, {nonterminal}, or {nonterminal}
    {var} is not currently an element of {var}
    {var} is not empty
    {var} is not finite
    {var} is not in {PREFIX_PAREN}
    {var} is not in {var}
    {var} is not on the list of waiters in any WaiterList
    {var} is not on the list of waiters in {var}
    {var} is not one of {LITERAL}, {LITERAL}, {LITERAL}, or {LITERAL}
    {var} is not one of {nonterminal}, {nonterminal}, {nonterminal}, `super` or `this`
    {var} is not one of {nonterminal}, {nonterminal}, {nonterminal}, `super`, or `this`
    {var} is not the Environment Record for a |Catch| clause
    {var} is not the same as {var}
    {var} is not {var}
    {var} is now an empty List
    {var} is now the running execution context
    {var} is odd
    {var} is on the list of waiters in {var}
    {var} is one of the code units in {STR_LITERAL}
    {var} is one of {LITERAL}, {LITERAL}, {LITERAL}, or {LITERAL}
    {var} is present in the table in step {h_emu_xref}
    {var} is the String value {STR_LITERAL}
    {var} is the execution context of a generator
    {var} is the same Number value as {var}
    {var} is the same sequence of code units as {var}
    {var} is the value {LITERAL}
    {var} is the {nonterminal} of an? {nonterminal}
    {var} is the {nonterminal} {TERMINAL}
    {var} is this specification's name of an intrinsic object. The corresponding object must be an intrinsic that is intended to be used as the {DSBN} value of an object
    {var} is {LITERAL} because formal parameters mapped by argument objects are always writable
    {var} is {LITERAL}, {LITERAL}, {LITERAL}, or an integral Number
    {var} is {LITERAL}, {LITERAL}, {LITERAL}, {LITERAL}, or {LITERAL}
    {var} is {LITERAL}, {LITERAL}, {LITERAL}, {LITERAL}, {LITERAL}, or {LITERAL}
    {var} is {nonterminal}
    {var} must have an uninitialized binding for {var}
    {var} occurs exactly once in {var}
    {var} or {var} are any of {LITERAL}, {LITERAL}, or {LITERAL}
    {var} or {var} is {LITERAL}
    {var} provides the direct binding for this export
    {var} starts with {STR_LITERAL} followed by {EX} or more decimal digits
    {var} starts with {STR_LITERAL}
    {var} was notified explicitly by another agent calling NotifyWaiter({var}, {var})
    {var}, {var}, and {var} have the same number of elements

{PROPERTY_KIND} :
    accessor
    data

{TYPE_TEST} :
    Both Type({var}) and Type({var}) are Number or both are BigInt
    Type({TYPE_ARG}) is an ECMAScript language type
    Type({TYPE_ARG}) is different from Type({TYPE_ARG})
    Type({TYPE_ARG}) is either {TYPE_NAME} or {TYPE_NAME}
    Type({TYPE_ARG}) is either {TYPE_NAME}, {TYPE_NAME}, {TYPE_NAME}, or {TYPE_NAME}
    Type({TYPE_ARG}) is neither {TYPE_NAME} nor {TYPE_NAME}
    Type({TYPE_ARG}) is not an element of {var}
    Type({TYPE_ARG}) is not {TYPE_NAME}
    Type({TYPE_ARG}) is the same as Type({TYPE_ARG})
    Type({TYPE_ARG}) is {TYPE_NAME}
    Type({TYPE_ARG}) is {TYPE_NAME} or {TYPE_NAME}

{TYPE_ARG} :
    {DOTTING}
    {var}

{NUM_COMPARISON} :
    {NUM_COMPARAND} is 10 or less
    {NUM_COMPARAND} is equivalent to {NUM_COMPARAND}
    {NUM_COMPARAND} {NUM_COMPARATOR} {NUM_COMPARAND}
    {NUM_COMPARAND} {NUM_COMPARATOR} {NUM_COMPARAND} {NUM_COMPARATOR} {NUM_COMPARAND}

{NUM_COMPARAND} :
    the length of {var}
    the number of elements in {var}
    the numeric value of {var}
    {FACTOR}
    {PRODUCT}
    {SUM}
    {var}'s _endIndex_

{NUM_COMPARATOR} :
    &ge;
    &gt;
    &le;
    &lt;
    &ne;
    =
    is at least

# ---------------------------------------------------------------

{MULTILINE_EXPR} :
    a new {CLOSURE_KIND} with {CLOSURE_PARAMETERS} that captures {CLOSURE_CAPTURES} and performs the following {CLOSURE_STEPS} when called:{IND_COMMANDS}
    the string-concatenation of:{I_BULLETS}
    the {TABLE_RESULT_TYPE} associated with {var} in the following table:{_indent_}{nlai}{h_figure}{_outdent_}
    the {TABLE_RESULT_TYPE} associated with {var} and Type({var}) in the following table:{_indent_}{nlai}{h_figure}{_outdent_}

{CLOSURE_KIND} :
    Abstract Closure
    Continuation
    Job Abstract Closure
    Matcher
    read-modify-write modification function

{CLOSURE_PARAMETERS} :
    no parameters
    parameters ({var})
    parameters ({var}, {var})

{CLOSURE_CAPTURES} :
    nothing
    {var}
    {var} and {var}
    {var}, {var}, and {var}
    {var}, {var}, {var}, and {var}
    {var}, {var}, {var}, {var}, {var}, {var}, {var}, and {var}

{CLOSURE_STEPS} :
    steps
    steps atomically

{TABLE_RESULT_TYPE} :
    abstract operation
    sequence of Unicode code points

# ---------------------------------------------------------------

{EXPR} :
    (({var} `*` msPerHour `+` {var} `*` msPerMinute) `+` {var} `*` msPerSecond) `+` {var}, performing the arithmetic according to IEEE 754-2019 rules (that is, as if using the ECMAScript operators `*` and `+`)
    Type({var})
    a List consisting of the sequence of code units that are the elements of {var}
    a List containing the names of all the internal slots that {h_emu_xref} requires for the built-in function object that is about to be created
    a List of length {var} whose elements are nondeterministically chosen byte values
    a List of length {var} whose elements are the sequence of {var} bytes starting with {var}[{var}]
    a List of one or more {ERROR_TYPE} objects representing the parsing errors and/or early errors. If more than one parsing error or early error is present, the number and ordering of error objects in the list is implementation-defined, but at least one must be present
    a List of {var} {LITERAL} values, indexed 1 through {var}
    a List whose elements are bytes from {var} at indices {var} (inclusive) through {EX} (exclusive)
    a List whose elements are the 4 bytes that are the result of converting {var} to IEEE 754-2019 binary32 format using roundTiesToEven mode. If {var} is {LITERAL}, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If {var} is *NaN*, {var} may be set to any implementation chosen IEEE 754-2019 binary32 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable *NaN* value
    a List whose elements are the 8 bytes that are the IEEE 754-2019 binary64 format encoding of {var}. If {var} is {LITERAL}, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If {var} is *NaN*, {var} may be set to any implementation chosen IEEE 754-2019 binary64 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable *NaN* value
    a List whose elements are the characters of {var} at indices {var} (inclusive) through {var} (exclusive)
    a List whose elements are the code points of {var}
    a List whose elements are the code unit elements of {var}
    a List whose elements are the code units that are the elements of {var}
    a List whose elements are the elements of {var}
    a List whose elements are the elements of {var} ordered as if an Array of the same values had been sorted using {percent_word} using {LITERAL} as {var}
    a List whose elements are the elements of {var}, in the order in which they had their {dsb_word} fields set to {LITERAL} in {cap_word}
    a List whose elements are the {var}-byte binary encoding of {var}. If {var} is {LITERAL}, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order
    a List whose elements are the {var}-byte binary two's complement encoding of {var}. If {var} is {LITERAL}, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order
    a List whose sole element is {EX}
    a String according to {h_emu_xref}
    a String containing one instance of each code unit valid in {nonterminal}
    a String containing one instance of each code unit valid in {nonterminal} and {nonterminal} plus {STR_LITERAL}
    a String containing one instance of each code unit valid in {nonterminal} plus {STR_LITERAL}
    a String in the form of a {nonterminal} ({nonterminal} if {var} contains *"u"*) equivalent to {var} interpreted as UTF-16 encoded Unicode code points ({h_emu_xref}), in which certain code points are escaped as described below. {var} may or may not be identical to {var}; however, the Abstract Closure that would result from evaluating {var} as a {nonterminal} ({nonterminal} if {var} contains *"u"*) must behave identically to the Abstract Closure given by the constructed object's {DSBN} internal slot. Multiple calls to this abstract operation using the same values for {var} and {var} must produce identical results
    a copy of the List {var}
    a copy of {var}
    a copy of {var}'s _captures_ List
    a new Data Block value consisting of {var} bytes. If it is impossible to create such a Data Block, throw a {ERROR_TYPE} exception
    a new ECMAScript code execution context
    a new Private Name whose {dsb_word} value is {var}
    a new Property Descriptor that initially has no fields
    a new Realm Record
    a new Record
    a new Shared Data Block value consisting of {var} bytes. If it is impossible to create such a Shared Data Block, throw a {ERROR_TYPE} exception
    a new Synchronize event
    a new built-in function object that, when called, performs the action described by {var} using the provided arguments as the values of the corresponding parameters specified by {var}. The new function object has internal slots whose names are the elements of {var}, and an {DSBN} internal slot
    a new empty List
    a new execution context
    a new unique Symbol value whose {DSBN} value is {var}
    a new {ENVIRONMENT_RECORD_KIND} Environment Record
    a new {ENVIRONMENT_RECORD_KIND} Environment Record containing no bindings
    a newly created Property Descriptor with no fields
    a newly created object with an internal slot for each name in {var}
    a one-element CharSet containing the character {var}
    a reference to the list of waiters in {var}
    an Iterator object ({h_emu_xref}) whose `next` method iterates over all the String-valued keys of enumerable properties of {var}. The iterator object is never directly accessible to ECMAScript code. The mechanics and order of enumerating the properties is not specified but must conform to the rules specified below
    an empty Set
    an implementation-approximated Number value representing {EXPR}
    an implementation-defined Completion value
    an implementation-defined String source code representation of {var}. The representation must have the syntax of a {nonterminal}
    an implementation-defined String source code representation of {var}. The representation must have the syntax of a {nonterminal}. Additionally, if {var} has an {DSBN} internal slot and {DOTTING} is a String, the portion of the returned String that would be matched by {nonterminal} {nonterminal} must be the value of {DOTTING}
    an implementation-defined choice of either {var} or {var}
    an implementation-defined string that is either {EX} or {EXPR}
    an instance of the production {h_emu_grammar}
    such an object created in a host-defined manner
    that Private Name
    that PrivateElement
    the 32-bit two's complement bit string representing {EX}
    the 8-bit value represented by the two hexadecimal digits at index {EX} and {EX}
    the Agent Events Record in {DOTTING} whose {DSBN} is {PP_NAMED_OPERATION_INVOCATION}
    the Agent Record of the surrounding agent
    the BigInt defined by the mathematical relation {var} = {var} - ({var} &times; {var}) where {var} is a BigInt that is negative only if {var}/{var} is negative and positive only if {var}/{var} is positive, and whose magnitude is as large as possible without exceeding the magnitude of the true mathematical quotient of {var} and {var}
    the BigInt value that corresponds to {var}
    the BigInt value that represents {EX}
    the CharSet containing all Unicode code points included in {NAMED_OPERATION_INVOCATION}
    the CharSet containing all Unicode code points not included in {NAMED_OPERATION_INVOCATION}
    the CharSet containing all Unicode code points whose character database definition includes the property &ldquo;General_Category&rdquo; with value {var}
    the CharSet containing all Unicode code points whose character database definition includes the property {var} with value &ldquo;True&rdquo;
    the CharSet containing all Unicode code points whose character database definition includes the property {var} with value {var}
    the CharSet containing all characters corresponding to a code point on the right-hand side of the {nonterminal} or {nonterminal} productions
    the CharSet containing all characters not in {NAMED_OPERATION_INVOCATION}
    the CharSet containing all characters with a character value greater than or equal to {var} and less than or equal to {var}
    the CharSet containing the character matched by {PROD_REF}
    the CharSet containing the single character {code_point_lit}
    the CharSet containing the single character {var}
    the CharSet of all characters
    the Completion Record that is the result of evaluating {var} in a manner that conforms to the specification of {var}. The *this* value is uninitialized, {var} provides the named parameters, and {var} provides the NewTarget value
    the Completion Record that is the result of evaluating {var} in a manner that conforms to the specification of {var}. {var} is the *this* value, {var} provides the named parameters, and the NewTarget value is *undefined*
    the ECMAScript Number value corresponding to {var}
    the Element Size value specified in {h_emu_xref} for Element Type {var}
    the Element Size value specified in {h_emu_xref} for {var}
    the Element Type value in {h_emu_xref} for {EX}
    the List of Unicode code points {var}
    the List of arguments that was passed to this function by {dsb_word} or {dsb_word}
    the List of octets resulting by applying the UTF-8 transformation to {DOTTING}
    the List of {nonterminal} items in {PROD_REF}, in source text order
    the List that is {DOTTING}
    the List, in source text order, of Unicode code points in the source text matched by {PROD_REF}
    the Name of the entry in {h_emu_xref} with the Number {PP_NAMED_OPERATION_INVOCATION}
    the Number value that corresponds to {var}
    the Parse Node (an instance of {var}) at the root of the parse tree resulting from the parse
    the Private Name in {var} whose {dsb_word} is {var}
    the Record { {DSBN}, {DSBN} } that is the value of {EX}
    the State ({EX}, {var})
    the String representation of this Number value using the radix specified by {var}. Letters `a`-`z` are used for digits with values 10 through 35. The precise algorithm is implementation-defined, however the algorithm should be a generalization of that specified in {h_emu_xref}
    the String representation of {EX}, formatted as a decimal number
    the String representation of {EX}, formatted as a two-digit decimal number, padded to the left with {code_unit_lit} if necessary
    the String value consisting of repeated concatenations of {EX} truncated to length {var}
    the String value consisting of the code units of the digits of the decimal representation of {var}
    the String value consisting of {EX}
    the String value consisting solely of {code_unit_lit}
    the String value containing only the code unit {var}
    the String value containing the single code unit {var}
    the String value containing {var} occurrences of {code_unit_lit}
    the String value for the list-separator String appropriate for the host environment's current locale (this is derived in an implementation-defined way)
    the String value formed by concatenating all the element Strings of {var} with each adjacent pair of Strings separated with {code_unit_lit}. A comma is not inserted either before the first String or after the last String
    the String value formed by concatenating all the element Strings of {var} with each adjacent pair of Strings separated with {var}. The {var} String is not inserted either before the first String or after the last String
    the String value of the Constructor Name value specified in {h_emu_xref} for this <var>TypedArray</var> constructor
    the String value of the property name
    the String value of {DOTTING}
    the String value that is a copy of {var} with both leading and trailing white space removed
    the String value that is a copy of {var} with leading white space removed
    the String value that is a copy of {var} with trailing white space removed
    the String value that is made from {var} copies of {var} appended together
    the String value that is the result of normalizing {var} into the normalization form named by {var} as specified in {h_a}
    the String value that is the same as {var} except that each occurrence of {code_unit_lit} in {var} has been replaced with the six code unit sequence {STR_LITERAL}
    the String value whose code units are the elements in the List {var}. If {var} has no elements, the empty String is returned
    the String value whose code units are the elements in the List {var}. If {var} is empty, the empty String is returned
    the String value {SETTABLE}
    the WaiterList that is referenced by the pair ({var}, {var})
    the abstract operation named in the Conversion Operation column in {h_emu_xref} for Element Type {var}
    the active function object
    the algorithm steps defined in {h_emu_xref}
    the byte elements of {var} concatenated and interpreted as a bit string encoding of a binary little-endian two's complement number of bit length {PRODUCT}
    the byte elements of {var} concatenated and interpreted as a bit string encoding of an unsigned little-endian binary number
    the byte elements of {var} concatenated and interpreted as a little-endian bit string encoding of an IEEE 754-2019 binary32 value
    the byte elements of {var} concatenated and interpreted as a little-endian bit string encoding of an IEEE 754-2019 binary64 value
    the canonical property value of {var} as given in the &ldquo;Canonical property value&rdquo; column of the corresponding row
    the canonical {h_emu_not_ref_property_name} of {var} as given in the &ldquo;Canonical {h_emu_not_ref_property_name}&rdquo; column of the corresponding row
    the character matched by {PROD_REF}
    the character represented by {PROD_REF}
    the character value of character {var}
    the character whose character value is {var}
    the character {SETTABLE}
    the code point matched by {PROD_REF}
    the code point obtained by applying the UTF-8 transformation to {var}, that is, from a List of octets into a 21-bit value
    the code point value according to {h_emu_xref}
    the code point value of {code_point_lit}
    the code point value of {var}
    the code point whose numeric value is that of {var}
    the code point whose numeric value is {NAMED_OPERATION_INVOCATION}
    the code point {var}
    the code unit (represented as a 16-bit unsigned integer) at index {var} within {var}
    the code unit whose numeric value is that of {EXPR}
    the element in {EX} whose {DSBN} is {EX}
    the element of {EX} whose {DSBN} field is {var}
    the element of {EX} whose {DSBN} is the same as {EX}
    the empty CharSet
    the empty sequence of Unicode code points
    the first agent in {var}
    the first element of {var}
    the first waiter in {var}
    the fully populated data Property Descriptor for the property, containing the specified attributes for the property. For properties listed in {h_emu_xref}, {h_emu_xref}, or {h_emu_xref} the value of the {DSBN} attribute is the corresponding intrinsic object from {var}
    the grammar symbol {nonterminal}
    the greatest (closest to +&infin;) integral Number value that is not greater than {var}
    the index into {var} of the character that was obtained from element {EX} of {var}
    the index within {var} of the first such code unit
    the integer that is {EXPR}
    the integer value that is represented by {var} in radix-{var} notation, using the letters <b>A</b>-<b>Z</b> and <b>a</b>-<b>z</b> for digits with values 10 through 35
    the integral Number closest to {var}, preferring the Number closer to +&infin; in the case of a tie
    the integral Number nearest {var} in the direction of *+0*{h_sub_fancy_f}
    the internal slots listed in {h_emu_xref}
    the internal slots listed in {h_emu_xref}, plus {DSBN} and {DSBN}
    the intrinsic function {percent_word}
    the intrinsic object listed in column one of {h_emu_xref} for {DOTTING}
    the last element in {var}
    the length of {var}
    the list-concatenation of {EX} and {EX}
    the list-concatenation of {var}, {var}, and {var}
    the longest prefix of {var}, which might be {var} itself, that satisfies the syntax of a {nonterminal}
    the mathematical value denoted by the result of replacing each significant digit in the decimal representation of {var} after the 20th with a 0 digit
    the mathematical value denoted by the result of replacing each significant digit in the decimal representation of {var} after the 20th with a 0 digit and then incrementing it at the 20th position (with carrying as necessary)
    the mathematical value whose sign is the sign of {var} and whose magnitude is {EX}
    the number of bytes in {var}
    the number of characters contained in {var}
    the number of code points in {PROD_REF}
    the number of code points in {PROD_REF}, excluding all occurrences of {nonterminal}
    the number of code unit elements in {var}
    the number of elements in the List {var}
    the number of elements in {var}'s _captures_ List
    the number of leading 1 bits in {var}
    the number of leading zero bits in the unsigned 32-bit binary representation of {var}
    the number of left-capturing parentheses in the entire regular expression that occur to the left of {PROD_REF}. This is the total number of {h_emu_grammar} Parse Nodes prior to or enclosing {PROD_REF}
    the number of left-capturing parentheses in the entire regular expression that occur to the left of {PROD_REF}. This is the total number of {h_emu_grammar} Parse Nodes prior to or enclosing {PROD_REF}, including its immediately enclosing {nonterminal}
    the number of left-capturing parentheses in {PROD_REF}. This is the total number of {h_emu_grammar} Parse Nodes enclosed by {PROD_REF}
    the number of non-optional parameters of the function definition in {h_emu_xref}
    the one character in CharSet {var}
    the other {EX} code units of {var}
    the parse of some source text
    the result of applying bitwise complement to {var}. The mathematical value of the result is exactly representable as a 32-bit two's complement bit string
    the result of applying that mapping to {var}
    the result of applying the bitwise AND operation to {var} and {var}
    the result of applying the bitwise exclusive OR (XOR) operation to {var} and {var}
    the result of applying the bitwise inclusive OR operation to {var} and {var}
    the result of clamping {var} between 0 and {EX}
    the result of converting {var} to a value in IEEE 754-2019 binary32 format using roundTiesToEven mode
    the result of converting {var} to a value in IEEE 754-2019 binary64 format
    the result of interpreting each of {var}'s 16-bit elements as a Unicode BMP code point. UTF-16 decoding is not applied to the elements
    the result of negating {var}; that is, compute a Number with the same magnitude but opposite sign
    the result of parsing {var} as a date, in exactly the same manner as for the `parse` method ({h_emu_xref})
    the result of performing a sign-extending right shift of {var} by {var} bits. The most significant bit is propagated. The mathematical value of the result is exactly representable as a 32-bit two's complement bit string
    the result of performing a zero-filling right shift of {var} by {var} bits. Vacated bits are filled with zero. The mathematical value of the result is exactly representable as a 32-bit unsigned bit string
    the result of performing {PP_NAMED_OPERATION_INVOCATION}
    the result of raising {EX} to the {EX} power
    the result of subtracting 1 from the exponential function of {EX}
    the result of the {MATH_FUNC} of {EX}
    the result of toLowercase({var}), according to the Unicode Default Case Conversion algorithm
    the result of toUppercase(&laquo; {var} &raquo;), according to the Unicode Default Case Conversion algorithm
    the result of {PP_NAMED_OPERATION_INVOCATION}
    the running execution context
    the second element of {var}
    the second to top element of the execution context stack
    the sequence of code points resulting from interpreting each of the 16-bit elements of {var} as a Unicode BMP code point. UTF-16 decoding is not applied to the elements
    the smallest (closest to -&infin;) integral Number value that is not less than {var}
    the sole element of {PP_NAMED_OPERATION_INVOCATION}
    the sole element of {var}
    the source text matched by {PROD_REF}
    the source text that was recognized as {PROD_REF}
    the square root of the sum of squares of the mathematical values of the elements of {var}
    the string that is the only element of {PP_NAMED_OPERATION_INVOCATION}
    the string-concatenation of {EX} and {EX}
    the string-concatenation of {EX}, {EX}, and {EX}
    the string-concatenation of {EX}, {EX}, {EX}, and {EX}
    the string-concatenation of {EX}, {EX}, {EX}, {EX}, and {EX}
    the string-concatenation of {EX}, {EX}, {EX}, {EX}, {EX}, {EX}, and {EX}
    the string-concatenation of {EX}, {EX}, {EX}, {EX}, {EX}, {EX}, {EX}, and {EX}
    the string-concatenation of {EX}, {EX}, {EX}, {EX}, {EX}, {EX}, {EX}, {EX}, {EX}, {EX}, and {EX}
    the surrounding agent's Agent Record
    the ten-element CharSet containing the characters `0` through `9` inclusive
    the time value (UTC) identifying the current time
    the topmost execution context on the execution context stack whose ScriptOrModule component is not {LITERAL}
    the union of CharSets {var} and {var}
    the union of CharSets {var}, {var} and {var}
    the union of {var} and {var}
    the value currently bound to {var} in {var}
    the value that {var} corresponds to in {h_emu_xref}
    the {nonterminal} that is covered by {LOCAL_REF}
    the {nonterminal}, {nonterminal}, or {nonterminal} that most closely contains {var}
    the {var} that was passed to this function by {DSBN} or {DSBN}
    this Date object
    {EX}
    {EX} - ({EX} &times; {var}) where {var} is an integer that is negative if and only if {var} and {var} have opposite sign, and whose magnitude is as large as possible without exceeding the magnitude of {EX} / {EX}
    {var}'s State
    {var}'s _captures_ List
    {var}'s code point value
    {var}'s intrinsic object named {var}
    {var}'s own property whose key is {var}
    {var}'s single code unit element
    {var}'s {DSBN} value
    {var}<sup>th</sup> element of {var}'s _captures_ List

{EX} :
    &laquo; &raquo;
    &laquo; {EXLIST} &raquo;
    ({EX})
    *this* value
    NewTarget
    The number of elements in {var}
    The remainder of dividing {EX} by {EX}
    a newly created {ERROR_TYPE} object
    a nondeterministically chosen byte value
    an implementation-defined timezone name
    the *this* value
    the BigInt value for {EX}
    the GlobalSymbolRegistry List
    the GlobalSymbolRegistry List (see {h_emu_xref})
    the Number value for {EX}
    the String {var}
    the code unit at index {EX} within {EX}
    the code unit whose value is {EX}
    the code units of {var}
    the current Realm Record
    the difference {var} minus {var}
    the digits of the decimal representation of {var} (in order, with no leading zeroes)
    the escape sequence for {var} as specified in the &ldquo;Escape Sequence&rdquo; column of the corresponding row
    the first code unit of {var}
    the first {SUM} code units of {var}
    the integer represented by the 32-bit two's complement bit string {var}
    the number of code units in {var}
    the number of elements in {var}
    the number of elements of {var}
    the numeric value of {EX}
    the product of {var} and {var}
    the remainder of dividing {EX} by {EX}
    the remaining {EX} code units of {var}
    the result of left shifting {var} by {var} bits. The mathematical value of the result is exactly representable as a 32-bit two's complement bit string
    the substring of {var} from {EX}
    the substring of {var} from {EX} to {EX}
    the sum of {var} and {var}
    the value of {SETTABLE}
    the {var} flag
    {DSBN}
    {EX} occurrences of {code_unit_lit}
    {EX}, rounding down to the nearest integer, including for negative numbers
    {LITERAL}
    {LOCAL_REF}
    {NUM_EXPR}
    {PAIR}
    {PP_NAMED_OPERATION_INVOCATION}
    {RECORD_CONSTRUCTOR}
    {backticked_oth}
    {backticked_word}
    {h_code_quote}
    {var} rounded towards 0 to the next integer value
    {var}'s _endIndex_
    {var}'s _endIndex_ value

{MATH_FUNC} :
    base 10 logarithm
    base 2 logarithm
    cosine
    cube root
    exponential function
    hyperbolic cosine
    hyperbolic sine
    hyperbolic tangent
    inverse cosine
    inverse hyperbolic cosine
    inverse hyperbolic sine
    inverse hyperbolic tangent
    inverse sine
    inverse tangent
    natural logarithm
    sine
    square root
    tangent

{ENVIRONMENT_RECORD_KIND} :
    declarative
    function
    global
    module
    object

{PAIR} :
    ({EX}, {EX})

# ------------------------------------------------------

# "PP" = Possibly-Prefixed
{PP_NAMED_OPERATION_INVOCATION} :
    ! {NAMED_OPERATION_INVOCATION}
    ? {NAMED_OPERATION_INVOCATION}
    {NAMED_OPERATION_INVOCATION}

{NAMED_OPERATION_INVOCATION} :
    evaluating {LOCAL_REF}
    evaluating {LOCAL_REF}. This may be of type Reference
    evaluating {nonterminal} {var}
    the CharSet returned by {h_emu_grammar} 
    the {cap_word} of {LOCAL_REF}
    the {cap_word} of {LOCAL_REF} (see {h_emu_xref})
    the {cap_word} of {LOCAL_REF} as defined in {h_emu_xref}
    the {cap_word} of {LOCAL_REF} {WITH_ARGS}
    {LOCAL_REF} Contains {TERMINAL}
    {LOCAL_REF} Contains {nonterminal}
    {LOCAL_REF} Contains {var}
    {PREFIX_PAREN}
    {cap_word} of {LOCAL_REF}
    {cap_word} of {LOCAL_REF} {WITH_ARGS}

{LOCAL_REF} :
    the parsed code that is {DOTTING}
    the {nonterminal} of {var}
    {PROD_REF}
    {SETTABLE}

{PROD_REF} :
    the corresponding {nonterminal}
    the derived {nonterminal}
    the enclosing {nonterminal}
    the located {nonterminal}
    the {ORDINAL} {nonterminal}
    the {nonterminal}
    the {nonterminal} contained in {PROD_REF}
    this production
    this {nonterminal}
    {nonterminal}

{ORDINAL} :
    first
    second
    third

{WITH_ARGS} :
    {PASSING} argument {EX}
    {PASSING} arguments {EX} and {EX}
    {PASSING} arguments {var}, {var}, and {var}
    {PASSING} {EX} as the argument
    {PASSING} {var} and {EX} as arguments
    {PASSING} {var} and {EX} as the arguments
    {PASSING} {var}, {var}, and {var} as the arguments

{PASSING} :
    passing
    using
    with

{PREFIX_PAREN} :
    {OPN_BEFORE_PAREN}({EXLIST_OPT})
    {OPN_BEFORE_PAREN}({EXLIST_OPT}) (see {h_emu_xref})

{OPN_BEFORE_PAREN} :
    {DOTTING}
    {NUMERIC_TYPE_INDICATOR}::{low_word}
    {SIMPLE_OPERATION_NAME}
    {var}
    {var}.{cap_word}

{SIMPLE_OPERATION_NAME} :
    ForIn/OfBodyEvaluation
    ForIn/OfHeadEvaluation
    abs
    floor
    max
    min
    msFromTime
    thisBigIntValue
    thisBooleanValue
    thisNumberValue
    thisStringValue
    thisSymbolValue
    thisTimeValue
    {cap_word}
    {fancy_f}
    {fancy_r}
    {fancy_z}

{NUMERIC_TYPE_INDICATOR} :
    BigInt
    Number

{EXLIST_OPT} :
    {EPSILON}
    {EXLIST}

{EXLIST} :
    {EXLIST}, {EX}
    {EX}

# ------------------------------------------------------

{RECORD_CONSTRUCTOR} :
    {RECORD_CONSTRUCTOR_PREFIX} { {FIELDS} }

{RECORD_CONSTRUCTOR_PREFIX} :
    AsyncGeneratorRequest
    Chosen Value Record
    Completion
    PrivateElement
    PropertyDescriptor
    ReadModifyWriteSharedMemory
    ReadSharedMemory
    Record
    ResolvedBinding Record
    Script Record
    Source Text Module Record
    WriteSharedMemory
    the ClassFieldDefinition Record
    the ClassStaticBlockDefinition Record
    the ExportEntry Record
    the ImportEntry Record
    the JobCallback Record
    the PrivateEnvironment Record
    the PromiseCapability Record
    the PromiseReaction
    the PropertyDescriptor
    the Record
    the Reference Record

{FIELDS} :
    {FIELDS}, {FIELD}
    {FIELD}

{FIELD} :
    {DSBN}: {EX}

# ------------------------------------------------------

{SETTABLE} :
    The {EXECUTION_CONTEXT_COMPONENT} of {var}
    the Synchronize event in {var}
    the bound value for {var} in {var}
    the running execution context's {EXECUTION_CONTEXT_COMPONENT}
    the {DSBN} field of the calling surrounding's Agent Record
    the {DSBN} field of {EXPR}
    the {DSBN} internal slot of this Date object
    the {EXECUTION_CONTEXT_COMPONENT} component of {var}
    the {EXECUTION_CONTEXT_COMPONENT} of the running execution context
    the {EXECUTION_CONTEXT_COMPONENT} of {var}
    {DOTTING}
    {DOTTING}[{EX}]
    {var}
    {var}'s {DSBN} attribute
    {var}'s {EXECUTION_CONTEXT_COMPONENT}
    {var}[{EX}]

{EXECUTION_CONTEXT_COMPONENT} :
    Function
    Generator
    LexicalEnvironment
    PrivateEnvironment
    Realm
    ScriptOrModule
    VariableEnvironment
    code evaluation state

# --------------------------------

{NUM_EXPR} :
    &pi;
    &pi; / 2
    &pi; / 4
    -&pi;
    -&pi; / 2
    -&pi; / 4
    -3&pi; / 4
    3&pi; / 4
    {EX} raised to the power {EX}
    {PRODUCT}
    {SUM}
# Note that this is not trying to capture every expression that has a numeric result,
# merely those that involve mathematical operators/forms.

# {BIT_EX} :
#     {FACTOR} {BIT_OPERATOR} {FACTOR}
#
# {BIT_OPERATOR} :
#     &amp;
#     &lt;&lt;

{SUM} :
    {SUM} {SUM_OPERATOR} {TERM}
    {TERM} {SUM_OPERATOR} {TERM}

{SUM_OPERATOR} :
    +
    -
    plus

{TERM} :
    {FACTOR}
    {PRODUCT}

{PRODUCT} :
    the negation of {EX}
    the quotient {FACTOR} / {FACTOR}
    {FACTOR} modulo {FACTOR}
    {FACTOR} {PRODUCT_OPERATOR} {FACTOR}
    {UNARY_OPERATOR}{FACTOR}

{UNARY_OPERATOR} :
    -

{PRODUCT_OPERATOR} :
    &times;
    /

{FACTOR} :
    ({NUM_EXPR})
    msPerDay
    msPerMinute
    {BASE}<sup>{EX}</sup>
    {NUM_LITERAL}
    {PP_NAMED_OPERATION_INVOCATION}
    {SETTABLE}

{BASE} :
    10
    2

# --------------------------------

{DOTTING} :
    {DOTTING}.{DSBN}
    {var}.{DSBN}

{DSBN} :
    {dsb_percent_word}
    {dsb_word}

{TERMINAL} :
    {backticked_word}

{LITERAL} :
    *false*
    *null*
    *true*
    *undefined*
    the value *undefined*
    {NUM_LITERAL}
    {STR_LITERAL}
    {TYPE_NAME}
    {atat_word}
    {code_unit_lit}
    {percent_word}
    {tilded_word}

{STR_LITERAL} :
    *","* (a comma)
    the String {starred_str}
    the empty String
    the single-element String *","*
    {starred_str}
    {starred_str} ({code_unit_lit} followed by {code_unit_lit})

{NUM_LITERAL} :
    *-0.5*{h_sub_fancy_f}
    *0.5*{h_sub_fancy_f}
    +&infin;
    -&infin;
    0.5
    8.64
    the *NaN* Number value
    {dec_int_lit}
    {hex_int_lit}
    {starred_infinite_lit}{h_sub_fancy_f}
    {starred_int_lit}{h_sub_fancy_f}
    {starred_int_lit}{h_sub_fancy_z}
    {starred_nan_lit}

{ERROR_TYPE} :
    *AggregateError*
    *RangeError*
    *ReferenceError*
    *SyntaxError*
    *TypeError*
    *URIError*

{TYPE_NAME} :
    BigInt
    Boolean
    Null
    Number
    Object
    String
    Symbol
    Undefined

# -----------------------

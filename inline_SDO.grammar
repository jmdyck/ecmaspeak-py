
# ecmaspeak-py/inline_SDO.grammar:
# A grammar for one-line definitions of Syntax Directed Operations.
#
# Copyright (C) 2018  J. Michael Dyck <jmdyck@ibiblio.org>

{START} :
    {LI}{_eos_}

{LI} :
    <li>{nlai}{ISDO_RULE}{nlai}</li>

{ISDO_RULE} :
    The {ISDO_NAME} and {ISDO_NAME} of {h_emu_grammar} is {EXPR}.
    The {ISDO_NAME} of {h_emu_grammar} is {EXPR}.
    The {ISDO_NAME} of {h_emu_grammar} or of {h_emu_grammar} is {EXPR}.
    The {ISDO_NAME} of {h_emu_grammar} or of {h_emu_grammar} or of {h_emu_grammar} is {EXPR}.
    The {ISDO_NAME} of {h_emu_grammar} or of {h_emu_grammar} or of {h_emu_grammar} or of {h_emu_grammar} is {EXPR}.
    The {ISDO_NAME} of {h_emu_grammar} or of {h_emu_grammar} or of {h_emu_grammar} or of {h_emu_grammar} or of {h_emu_grammar} is {EXPR}.

{EXPR} :
    the String value consisting of {EXPR}
    the code unit whose value is determined by {PROD_REF} according to {h_emu_xref}
    the code unit whose value is {NAMED_OPERATION_INVOCATION}
    the negative of {EX}
    the string-concatenation of {EX} and {EX}
    the string-concatenation of {EX}, {EX}, and {EX}
    the string-concatenation of {EX}, {EX}, {EX}, and {EX}
    {EX}
    {EX} if {CONDITION}. Otherwise, it is {EXPR}
    {EX}, where {var} is {EX}
    {EX}, where {var} is {EX} and {var} is {EX}
    {EX}, where {var} is {EX}, and {var} is {EX}

{CONDITION} :
    either {CONDITION_1} or {CONDITION_1}

{CONDITION_1} :
    {NAMED_OPERATION_INVOCATION} is {U_LITERAL}

{EX} :
    the code point value of {PROD_REF}
    the number of code points in {PROD_REF}, excluding all occurrences of {nonterminal}
    the single code point matched by this production
    {NAMED_OPERATION_INVOCATION}
    {NUM_LITERAL}
    {PRODUCT}
    {STR_LITERAL}
    {SUM}
    {U_LITERAL}
    {code_unit_lit}
    {var}

{NAMED_OPERATION_INVOCATION} :
    the result of performing {cap_word} on {EX}
    the {ISDO_NAME} of {PROD_REF}

{ISDO_NAME} :
    {cap_word}

{PROD_REF} :
    the {ORDINAL} {nonterminal}
    the {nonterminal}
    {nonterminal}

{ORDINAL} :
    first
    second
    third
    fourth

{U_LITERAL} :
    *undefined*

{SUM} :
    {SUM} {SUM_OPERATOR} {TERM}
    {TERM} {SUM_OPERATOR} {TERM}

{SUM_OPERATOR} :
    -
    plus

{TERM} :
    ({PRODUCT})
    {FACTOR}

{PRODUCT} :
    -{var}
    {FACTOR} {PRODUCT_OPERATOR} {FACTOR}

{PRODUCT_OPERATOR} :
    &times;
    times

{FACTOR} :
    ({SUM})
    {BASE}<sup>{EX}</sup>
    {NAMED_OPERATION_INVOCATION}
    {NUM_LITERAL}
    {var}

{NUM_LITERAL} :
    {dec_int_lit}
    {hex_int_lit}

{STR_LITERAL} :
    the empty String

{BASE} :
    10

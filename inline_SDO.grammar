
# ecmaspeak-py/inline_SDO.grammar:
# A grammar for one-line definitions of Syntax Directed Operations.
#
# Copyright (C) 2018  J. Michael Dyck <jmdyck@ibiblio.org>

{START} :
    {LI}{_eos_}

{LI} :
    <li>{nlai}{ISDO_RULE}{nlai}</li>

{ISDO_RULE} :
    The {ISDO_NAME} and {ISDO_NAME} of {h_emu_grammar} is {EXPR}.
    The {ISDO_NAME} of {h_emu_grammar} is {EXPR}, no matter whether white space is present or not.
    The {ISDO_NAME} of {h_emu_grammar} is {EXPR}.
    The {ISDO_NAME} of {h_emu_grammar} is {EXPR}. (Note that if {NAMED_OPERATION_INVOCATION} is 0, the negative of this MV is also 0. The rounding rule described below handles the conversion of this signless mathematical zero to a floating-point *+0* or *-0* as appropriate.)
    The {ISDO_NAME} of {h_emu_grammar} or of {h_emu_grammar} is {EXPR}.
    The {ISDO_NAME} of {h_emu_grammar} or of {h_emu_grammar} or of {h_emu_grammar} is {EXPR}.
    The {ISDO_NAME} of {h_emu_grammar} or of {h_emu_grammar} or of {h_emu_grammar} or of {h_emu_grammar} is {EXPR}.
    The {ISDO_NAME} of {h_emu_grammar} or of {h_emu_grammar} or of {h_emu_grammar} or of {h_emu_grammar} or of {h_emu_grammar} is {EXPR}.

    # obsoleted by the merge of PR 1301:
    # The {ISDO_NAME} of a {nonterminal} is {NAMED_OPERATION_INVOCATION}.

{EXPR} :
    {FACTOR} (a value so large that it will round to *+&infin;*)
    a sequence consisting of the code units of {NAMED_OPERATION_INVOCATION} followed by the code units of {NAMED_OPERATION_INVOCATION}
    the code unit whose value is {NAMED_OPERATION_INVOCATION}
    the code unit whose value is {SUM}
    the code unit whose value is determined by {PROD_REF} according to {h_emu_xref}
    the empty code unit sequence
    the negative of {EX}
    the sequence consisting of {code_unit_lit}
    the sequence consisting of {EX} followed by {EX}
    the sequence consisting of {EX} followed by {EX} followed by {EX}
    the sequence consisting of {EX} followed by {EX} followed by {EX} followed by {EX}
    {EX}
    {EX} followed by {EX}
    {EX} if {CONDITION}. Otherwise, it is {EXPR}
    {EX}, where {var} is {EX}
    {EX}, where {var} is {EX} and {var} is {EX}
    {EX}, where {var} is {EX}, and {var} is {EX}

    # PR 2018
    the String value consisting of {EXPR}
    the string-concatenation of {EX} and {EX}
    the string-concatenation of {EX}, {EX}, and {EX}
    the string-concatenation of {EX}, {EX}, {EX}, and {EX}

{CONDITION} :
    either {CONDITION_1} or {CONDITION_1}

{CONDITION_1} :
    {NAMED_OPERATION_INVOCATION} is {U_LITERAL}

{EX} :
    #pre-1135: the number of code points in {PROD_REF}
    a sequence of up to two code units that is {NAMED_OPERATION_INVOCATION}
    the code point value of {nonterminal}
    the code units of {NAMED_OPERATION_INVOCATION}
    the code units of {NAMED_OPERATION_INVOCATION} in order
    the mathematical integer number of code points in {PROD_REF}, excluding all occurrences of {nonterminal}
    the mathematical value of the number of code points in {PROD_REF}
    the mathematical value of the number of code points in {PROD_REF}, excluding all occurrences of {nonterminal}
    the single code point matched by this production
    {NAMED_OPERATION_INVOCATION}
    {NUM_LITERAL}
    {PRODUCT}
    {SUM}
    {STR_LITERAL}
    {U_LITERAL}
    {code_unit_lit}
    {var}

    # obsoleted by the merge of PR #2151:
    # the mathematical integer number of code points in {PROD_REF}

{NAMED_OPERATION_INVOCATION} :
    the {ISDO_NAME} of {PROD_REF}
    {ISDO_NAME} of {PROD_REF}
    the result of performing {cap_word} on {EX}

{ISDO_NAME} :
    {cap_word}

{PROD_REF} :
    the {ORDINAL} {nonterminal}
    the {nonterminal}
    {nonterminal}

    # obsoleted by merge of PR #1571
    # the {nonterminal}

    # obsoleted by the merge of PR #1301:
    # the {nonterminal} that is that single code point
    # the {nonterminal} that is that {nonterminal}

{ORDINAL} :
    first
    second
    third
    fourth

{U_LITERAL} :
    *undefined*

{SUM} :
    {TERM} {SUM_OPERATOR} {TERM}
    {SUM} {SUM_OPERATOR} {TERM}

{SUM_OPERATOR} :
    #pre-1135: -
    -{h_sub_math_r}
    plus

{TERM} :
    ({PRODUCT})
    {FACTOR}

{PRODUCT} :
    #pre-1135: -{var}
    -{h_sub_math_r}{var}
    {FACTOR} {PRODUCT_OPERATOR} {FACTOR}

{PRODUCT_OPERATOR} :
    times
    &times;

{FACTOR} :
    {NUM_LITERAL}
    ({SUM})
    {BASE}<sup>{EX}</sup>
    {NAMED_OPERATION_INVOCATION}
    {var}

{NUM_LITERAL} :
    #pre-1135: {dec_int_lit}
    #pre-1135: {hex_int_lit}
    {dec_int_lit}{h_sub_math_r}
    {hex_int_lit}{h_sub_math_r}

    # PR 1651 one-grammar:
    64{h_sub_math_r} (that is, 8<sup>2</sup>)

{STR_LITERAL} :
    the empty String

{BASE} :
    #pre-1135: 10
    10{h_sub_math_r}
